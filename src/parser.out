Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EOL
    ESPECIAL
    LBRA
    LCBRA
    MATHEXPR
    QUOTE
    RBRA
    RCBRA
    RES
    WHITESPACE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> variable BEGIN expresiones END procedimientos
Rule 2     variable -> VAR variable1
Rule 3     variable1 -> ID ASSIGN NUM SEMICOLON
Rule 4     variable1 -> ID SEMICOLON
Rule 5     expresiones -> asignar expresiones
Rule 6     expresiones -> actualizar expresiones
Rule 7     expresiones -> cambiar_direccion expresiones
Rule 8     expresiones -> colocar expresiones
Rule 9     expresiones -> elevar expresiones
Rule 10    expresiones -> encender expresiones
Rule 11    expresiones -> mover expresiones
Rule 12    expresiones -> pos_inicio expresiones
Rule 13    expresiones -> llamar expresiones
Rule 14    expresiones -> c_keep expresiones
Rule 15    expresiones -> c_for expresiones
Rule 16    expresiones -> c_when expresiones
Rule 17    expresiones -> SKIP SEMICOLON expresiones
Rule 18    expresiones -> COMMENT expresiones
Rule 19    expresiones -> epsilon
Rule 20    c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
Rule 21    c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
Rule 22    c_keep -> KEEP expresiones KEND SEMICOLON
Rule 23    asignar -> SET ID ASSIGN NUM SEMICOLON
Rule 24    actualizar -> ADD SUM ID SEMICOLON
Rule 25    actualizar -> LESS SUM ID SEMICOLON
Rule 26    cambiar_direccion -> CHANGEDIR LPAR direccion
Rule 27    direccion -> LEFT RPAR
Rule 28    direccion -> RIGHT RPAR
Rule 29    direccion -> BACK RPAR
Rule 30    direccion -> SAME RPAR
Rule 31    colocar -> PLACE BLOCK colocar1
Rule 32    colocar1 -> SEMICOLON
Rule 33    colocar1 -> NUM SEMICOLON
Rule 34    elevar -> HIGH BLOCK elevar1
Rule 35    elevar1 -> SEMICOLON
Rule 36    elevar1 -> NUM SEMICOLON
Rule 37    encender -> PUT LIGHT SEMICOLON
Rule 38    mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON
Rule 39    pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
Rule 40    llamar -> CALL ID SEMICOLON
Rule 41    procedimientos -> PROC ID expresiones ENDPROC SEMICOLON
Rule 42    procedimientos -> epsilon
Rule 43    epsilon -> <empty>

Terminals, with rules where they appear

ADD                  : 24
ASSIGN               : 3 20 21 23
BACK                 : 29
BEGIN                : 1
BLOCK                : 31 34
CALL                 : 40
CHANGEDIR            : 26
COMMA                : 38 39
COMMENT              : 18
END                  : 1
ENDPROC              : 41
EOL                  : 
ESPECIAL             : 
FEND                 : 20
FOR                  : 20
HIGH                 : 34
ID                   : 3 4 20 21 23 24 25 40 41
KEEP                 : 22
KEND                 : 22
LBRA                 : 
LCBRA                : 
LEFT                 : 27
LESS                 : 25
LIGHT                : 37
LPAR                 : 26 38 39
MATHEXPR             : 
NUM                  : 3 20 21 23 33 36 38 38 39 39
PLACE                : 31
POS                  : 38
POSSTART             : 39
PROC                 : 41
PUT                  : 37
QUOTE                : 
RBRA                 : 
RCBRA                : 
RES                  : 
RIGHT                : 28
RPAR                 : 27 28 29 30 38 39
SAME                 : 30
SEMICOLON            : 3 4 17 20 21 22 23 24 25 32 33 35 36 37 38 39 40 41
SET                  : 23
SKIP                 : 17
SUM                  : 24 25
THEN                 : 21
TIMES                : 20
VAR                  : 2
WHEN                 : 21
WHEND                : 21
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

actualizar           : 6
asignar              : 5
c_for                : 15
c_keep               : 14
c_when               : 16
cambiar_direccion    : 7
colocar              : 8
colocar1             : 31
direccion            : 26
elevar               : 9
elevar1              : 34
encender             : 10
epsilon              : 19 42
expresiones          : 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 21 22 41
llamar               : 13
mover                : 11
pos_inicio           : 12
procedimientos       : 1
programa             : 0
variable             : 1
variable1            : 2

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . variable BEGIN expresiones END procedimientos
    (2) variable -> . VAR variable1

    VAR             shift and go to state 3

    programa                       shift and go to state 1
    variable                       shift and go to state 2

state 1

    (0) S' -> programa .



state 2

    (1) programa -> variable . BEGIN expresiones END procedimientos

    BEGIN           shift and go to state 4


state 3

    (2) variable -> VAR . variable1
    (3) variable1 -> . ID ASSIGN NUM SEMICOLON
    (4) variable1 -> . ID SEMICOLON

    ID              shift and go to state 6

    variable1                      shift and go to state 5

state 4

    (1) programa -> variable BEGIN . expresiones END procedimientos
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)

    expresiones                    shift and go to state 7
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 5

    (2) variable -> VAR variable1 .

    BEGIN           reduce using rule 2 (variable -> VAR variable1 .)


state 6

    (3) variable1 -> ID . ASSIGN NUM SEMICOLON
    (4) variable1 -> ID . SEMICOLON

    ASSIGN          shift and go to state 36
    SEMICOLON       shift and go to state 37


state 7

    (1) programa -> variable BEGIN expresiones . END procedimientos

    END             shift and go to state 38


state 8

    (5) expresiones -> asignar . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    asignar                        shift and go to state 8
    expresiones                    shift and go to state 39
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 9

    (6) expresiones -> actualizar . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    actualizar                     shift and go to state 9
    expresiones                    shift and go to state 40
    asignar                        shift and go to state 8
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 10

    (7) expresiones -> cambiar_direccion . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    cambiar_direccion              shift and go to state 10
    expresiones                    shift and go to state 41
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 11

    (8) expresiones -> colocar . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    colocar                        shift and go to state 11
    expresiones                    shift and go to state 42
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 12

    (9) expresiones -> elevar . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    elevar                         shift and go to state 12
    expresiones                    shift and go to state 43
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 13

    (10) expresiones -> encender . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    encender                       shift and go to state 13
    expresiones                    shift and go to state 44
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 14

    (11) expresiones -> mover . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    mover                          shift and go to state 14
    expresiones                    shift and go to state 45
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 15

    (12) expresiones -> pos_inicio . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    pos_inicio                     shift and go to state 15
    expresiones                    shift and go to state 46
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 16

    (13) expresiones -> llamar . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    llamar                         shift and go to state 16
    expresiones                    shift and go to state 47
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 17

    (14) expresiones -> c_keep . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    c_keep                         shift and go to state 17
    expresiones                    shift and go to state 48
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 18

    (15) expresiones -> c_for . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    c_for                          shift and go to state 18
    expresiones                    shift and go to state 49
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 19

    (16) expresiones -> c_when . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    c_when                         shift and go to state 19
    expresiones                    shift and go to state 50
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    epsilon                        shift and go to state 22

state 20

    (17) expresiones -> SKIP . SEMICOLON expresiones

    SEMICOLON       shift and go to state 51


state 21

    (18) expresiones -> COMMENT . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    expresiones                    shift and go to state 52
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 22

    (19) expresiones -> epsilon .

    END             reduce using rule 19 (expresiones -> epsilon .)
    KEND            reduce using rule 19 (expresiones -> epsilon .)
    ENDPROC         reduce using rule 19 (expresiones -> epsilon .)
    FEND            reduce using rule 19 (expresiones -> epsilon .)
    WHEND           reduce using rule 19 (expresiones -> epsilon .)


state 23

    (23) asignar -> SET . ID ASSIGN NUM SEMICOLON

    ID              shift and go to state 53


state 24

    (24) actualizar -> ADD . SUM ID SEMICOLON

    SUM             shift and go to state 54


state 25

    (25) actualizar -> LESS . SUM ID SEMICOLON

    SUM             shift and go to state 55


state 26

    (26) cambiar_direccion -> CHANGEDIR . LPAR direccion

    LPAR            shift and go to state 56


state 27

    (31) colocar -> PLACE . BLOCK colocar1

    BLOCK           shift and go to state 57


state 28

    (34) elevar -> HIGH . BLOCK elevar1

    BLOCK           shift and go to state 58


state 29

    (37) encender -> PUT . LIGHT SEMICOLON

    LIGHT           shift and go to state 59


state 30

    (38) mover -> POS . LPAR NUM COMMA NUM RPAR SEMICOLON

    LPAR            shift and go to state 60


state 31

    (39) pos_inicio -> POSSTART . LPAR NUM COMMA NUM RPAR SEMICOLON

    LPAR            shift and go to state 61


state 32

    (40) llamar -> CALL . ID SEMICOLON

    ID              shift and go to state 62


state 33

    (22) c_keep -> KEEP . expresiones KEND SEMICOLON
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    KEND            reduce using rule 43 (epsilon -> .)

    expresiones                    shift and go to state 63
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 34

    (20) c_for -> FOR . ID ASSIGN NUM TIMES expresiones FEND SEMICOLON

    ID              shift and go to state 64


state 35

    (21) c_when -> WHEN . ID ASSIGN NUM THEN expresiones WHEND SEMICOLON

    ID              shift and go to state 65


state 36

    (3) variable1 -> ID ASSIGN . NUM SEMICOLON

    NUM             shift and go to state 66


state 37

    (4) variable1 -> ID SEMICOLON .

    BEGIN           reduce using rule 4 (variable1 -> ID SEMICOLON .)


state 38

    (1) programa -> variable BEGIN expresiones END . procedimientos
    (41) procedimientos -> . PROC ID expresiones ENDPROC SEMICOLON
    (42) procedimientos -> . epsilon
    (43) epsilon -> .

    PROC            shift and go to state 68
    $end            reduce using rule 43 (epsilon -> .)

    procedimientos                 shift and go to state 67
    epsilon                        shift and go to state 69

state 39

    (5) expresiones -> asignar expresiones .

    END             reduce using rule 5 (expresiones -> asignar expresiones .)
    KEND            reduce using rule 5 (expresiones -> asignar expresiones .)
    ENDPROC         reduce using rule 5 (expresiones -> asignar expresiones .)
    FEND            reduce using rule 5 (expresiones -> asignar expresiones .)
    WHEND           reduce using rule 5 (expresiones -> asignar expresiones .)


state 40

    (6) expresiones -> actualizar expresiones .

    END             reduce using rule 6 (expresiones -> actualizar expresiones .)
    KEND            reduce using rule 6 (expresiones -> actualizar expresiones .)
    ENDPROC         reduce using rule 6 (expresiones -> actualizar expresiones .)
    FEND            reduce using rule 6 (expresiones -> actualizar expresiones .)
    WHEND           reduce using rule 6 (expresiones -> actualizar expresiones .)


state 41

    (7) expresiones -> cambiar_direccion expresiones .

    END             reduce using rule 7 (expresiones -> cambiar_direccion expresiones .)
    KEND            reduce using rule 7 (expresiones -> cambiar_direccion expresiones .)
    ENDPROC         reduce using rule 7 (expresiones -> cambiar_direccion expresiones .)
    FEND            reduce using rule 7 (expresiones -> cambiar_direccion expresiones .)
    WHEND           reduce using rule 7 (expresiones -> cambiar_direccion expresiones .)


state 42

    (8) expresiones -> colocar expresiones .

    END             reduce using rule 8 (expresiones -> colocar expresiones .)
    KEND            reduce using rule 8 (expresiones -> colocar expresiones .)
    ENDPROC         reduce using rule 8 (expresiones -> colocar expresiones .)
    FEND            reduce using rule 8 (expresiones -> colocar expresiones .)
    WHEND           reduce using rule 8 (expresiones -> colocar expresiones .)


state 43

    (9) expresiones -> elevar expresiones .

    END             reduce using rule 9 (expresiones -> elevar expresiones .)
    KEND            reduce using rule 9 (expresiones -> elevar expresiones .)
    ENDPROC         reduce using rule 9 (expresiones -> elevar expresiones .)
    FEND            reduce using rule 9 (expresiones -> elevar expresiones .)
    WHEND           reduce using rule 9 (expresiones -> elevar expresiones .)


state 44

    (10) expresiones -> encender expresiones .

    END             reduce using rule 10 (expresiones -> encender expresiones .)
    KEND            reduce using rule 10 (expresiones -> encender expresiones .)
    ENDPROC         reduce using rule 10 (expresiones -> encender expresiones .)
    FEND            reduce using rule 10 (expresiones -> encender expresiones .)
    WHEND           reduce using rule 10 (expresiones -> encender expresiones .)


state 45

    (11) expresiones -> mover expresiones .

    END             reduce using rule 11 (expresiones -> mover expresiones .)
    KEND            reduce using rule 11 (expresiones -> mover expresiones .)
    ENDPROC         reduce using rule 11 (expresiones -> mover expresiones .)
    FEND            reduce using rule 11 (expresiones -> mover expresiones .)
    WHEND           reduce using rule 11 (expresiones -> mover expresiones .)


state 46

    (12) expresiones -> pos_inicio expresiones .

    END             reduce using rule 12 (expresiones -> pos_inicio expresiones .)
    KEND            reduce using rule 12 (expresiones -> pos_inicio expresiones .)
    ENDPROC         reduce using rule 12 (expresiones -> pos_inicio expresiones .)
    FEND            reduce using rule 12 (expresiones -> pos_inicio expresiones .)
    WHEND           reduce using rule 12 (expresiones -> pos_inicio expresiones .)


state 47

    (13) expresiones -> llamar expresiones .

    END             reduce using rule 13 (expresiones -> llamar expresiones .)
    KEND            reduce using rule 13 (expresiones -> llamar expresiones .)
    ENDPROC         reduce using rule 13 (expresiones -> llamar expresiones .)
    FEND            reduce using rule 13 (expresiones -> llamar expresiones .)
    WHEND           reduce using rule 13 (expresiones -> llamar expresiones .)


state 48

    (14) expresiones -> c_keep expresiones .

    END             reduce using rule 14 (expresiones -> c_keep expresiones .)
    KEND            reduce using rule 14 (expresiones -> c_keep expresiones .)
    ENDPROC         reduce using rule 14 (expresiones -> c_keep expresiones .)
    FEND            reduce using rule 14 (expresiones -> c_keep expresiones .)
    WHEND           reduce using rule 14 (expresiones -> c_keep expresiones .)


state 49

    (15) expresiones -> c_for expresiones .

    END             reduce using rule 15 (expresiones -> c_for expresiones .)
    KEND            reduce using rule 15 (expresiones -> c_for expresiones .)
    ENDPROC         reduce using rule 15 (expresiones -> c_for expresiones .)
    FEND            reduce using rule 15 (expresiones -> c_for expresiones .)
    WHEND           reduce using rule 15 (expresiones -> c_for expresiones .)


state 50

    (16) expresiones -> c_when expresiones .

    END             reduce using rule 16 (expresiones -> c_when expresiones .)
    KEND            reduce using rule 16 (expresiones -> c_when expresiones .)
    ENDPROC         reduce using rule 16 (expresiones -> c_when expresiones .)
    FEND            reduce using rule 16 (expresiones -> c_when expresiones .)
    WHEND           reduce using rule 16 (expresiones -> c_when expresiones .)


state 51

    (17) expresiones -> SKIP SEMICOLON . expresiones
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    END             reduce using rule 43 (epsilon -> .)
    KEND            reduce using rule 43 (epsilon -> .)
    ENDPROC         reduce using rule 43 (epsilon -> .)
    FEND            reduce using rule 43 (epsilon -> .)
    WHEND           reduce using rule 43 (epsilon -> .)

    expresiones                    shift and go to state 70
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 52

    (18) expresiones -> COMMENT expresiones .

    END             reduce using rule 18 (expresiones -> COMMENT expresiones .)
    KEND            reduce using rule 18 (expresiones -> COMMENT expresiones .)
    ENDPROC         reduce using rule 18 (expresiones -> COMMENT expresiones .)
    FEND            reduce using rule 18 (expresiones -> COMMENT expresiones .)
    WHEND           reduce using rule 18 (expresiones -> COMMENT expresiones .)


state 53

    (23) asignar -> SET ID . ASSIGN NUM SEMICOLON

    ASSIGN          shift and go to state 71


state 54

    (24) actualizar -> ADD SUM . ID SEMICOLON

    ID              shift and go to state 72


state 55

    (25) actualizar -> LESS SUM . ID SEMICOLON

    ID              shift and go to state 73


state 56

    (26) cambiar_direccion -> CHANGEDIR LPAR . direccion
    (27) direccion -> . LEFT RPAR
    (28) direccion -> . RIGHT RPAR
    (29) direccion -> . BACK RPAR
    (30) direccion -> . SAME RPAR

    LEFT            shift and go to state 75
    RIGHT           shift and go to state 76
    BACK            shift and go to state 77
    SAME            shift and go to state 78

    direccion                      shift and go to state 74

state 57

    (31) colocar -> PLACE BLOCK . colocar1
    (32) colocar1 -> . SEMICOLON
    (33) colocar1 -> . NUM SEMICOLON

    SEMICOLON       shift and go to state 80
    NUM             shift and go to state 81

    colocar1                       shift and go to state 79

state 58

    (34) elevar -> HIGH BLOCK . elevar1
    (35) elevar1 -> . SEMICOLON
    (36) elevar1 -> . NUM SEMICOLON

    SEMICOLON       shift and go to state 83
    NUM             shift and go to state 84

    elevar1                        shift and go to state 82

state 59

    (37) encender -> PUT LIGHT . SEMICOLON

    SEMICOLON       shift and go to state 85


state 60

    (38) mover -> POS LPAR . NUM COMMA NUM RPAR SEMICOLON

    NUM             shift and go to state 86


state 61

    (39) pos_inicio -> POSSTART LPAR . NUM COMMA NUM RPAR SEMICOLON

    NUM             shift and go to state 87


state 62

    (40) llamar -> CALL ID . SEMICOLON

    SEMICOLON       shift and go to state 88


state 63

    (22) c_keep -> KEEP expresiones . KEND SEMICOLON

    KEND            shift and go to state 89


state 64

    (20) c_for -> FOR ID . ASSIGN NUM TIMES expresiones FEND SEMICOLON

    ASSIGN          shift and go to state 90


state 65

    (21) c_when -> WHEN ID . ASSIGN NUM THEN expresiones WHEND SEMICOLON

    ASSIGN          shift and go to state 91


state 66

    (3) variable1 -> ID ASSIGN NUM . SEMICOLON

    SEMICOLON       shift and go to state 92


state 67

    (1) programa -> variable BEGIN expresiones END procedimientos .

    $end            reduce using rule 1 (programa -> variable BEGIN expresiones END procedimientos .)


state 68

    (41) procedimientos -> PROC . ID expresiones ENDPROC SEMICOLON

    ID              shift and go to state 93


state 69

    (42) procedimientos -> epsilon .

    $end            reduce using rule 42 (procedimientos -> epsilon .)


state 70

    (17) expresiones -> SKIP SEMICOLON expresiones .

    END             reduce using rule 17 (expresiones -> SKIP SEMICOLON expresiones .)
    KEND            reduce using rule 17 (expresiones -> SKIP SEMICOLON expresiones .)
    ENDPROC         reduce using rule 17 (expresiones -> SKIP SEMICOLON expresiones .)
    FEND            reduce using rule 17 (expresiones -> SKIP SEMICOLON expresiones .)
    WHEND           reduce using rule 17 (expresiones -> SKIP SEMICOLON expresiones .)


state 71

    (23) asignar -> SET ID ASSIGN . NUM SEMICOLON

    NUM             shift and go to state 94


state 72

    (24) actualizar -> ADD SUM ID . SEMICOLON

    SEMICOLON       shift and go to state 95


state 73

    (25) actualizar -> LESS SUM ID . SEMICOLON

    SEMICOLON       shift and go to state 96


state 74

    (26) cambiar_direccion -> CHANGEDIR LPAR direccion .

    SKIP            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    COMMENT         reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    SET             reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    ADD             reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    LESS            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    CHANGEDIR       reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    PLACE           reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    HIGH            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    PUT             reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    POS             reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    POSSTART        reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    CALL            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    KEEP            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    FOR             reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    WHEN            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    END             reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    KEND            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    ENDPROC         reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    FEND            reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)
    WHEND           reduce using rule 26 (cambiar_direccion -> CHANGEDIR LPAR direccion .)


state 75

    (27) direccion -> LEFT . RPAR

    RPAR            shift and go to state 97


state 76

    (28) direccion -> RIGHT . RPAR

    RPAR            shift and go to state 98


state 77

    (29) direccion -> BACK . RPAR

    RPAR            shift and go to state 99


state 78

    (30) direccion -> SAME . RPAR

    RPAR            shift and go to state 100


state 79

    (31) colocar -> PLACE BLOCK colocar1 .

    SKIP            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    COMMENT         reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    SET             reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    ADD             reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    LESS            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    CHANGEDIR       reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    PLACE           reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    HIGH            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    PUT             reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    POS             reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    POSSTART        reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    CALL            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    KEEP            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    FOR             reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    WHEN            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    END             reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    KEND            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    ENDPROC         reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    FEND            reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)
    WHEND           reduce using rule 31 (colocar -> PLACE BLOCK colocar1 .)


state 80

    (32) colocar1 -> SEMICOLON .

    SKIP            reduce using rule 32 (colocar1 -> SEMICOLON .)
    COMMENT         reduce using rule 32 (colocar1 -> SEMICOLON .)
    SET             reduce using rule 32 (colocar1 -> SEMICOLON .)
    ADD             reduce using rule 32 (colocar1 -> SEMICOLON .)
    LESS            reduce using rule 32 (colocar1 -> SEMICOLON .)
    CHANGEDIR       reduce using rule 32 (colocar1 -> SEMICOLON .)
    PLACE           reduce using rule 32 (colocar1 -> SEMICOLON .)
    HIGH            reduce using rule 32 (colocar1 -> SEMICOLON .)
    PUT             reduce using rule 32 (colocar1 -> SEMICOLON .)
    POS             reduce using rule 32 (colocar1 -> SEMICOLON .)
    POSSTART        reduce using rule 32 (colocar1 -> SEMICOLON .)
    CALL            reduce using rule 32 (colocar1 -> SEMICOLON .)
    KEEP            reduce using rule 32 (colocar1 -> SEMICOLON .)
    FOR             reduce using rule 32 (colocar1 -> SEMICOLON .)
    WHEN            reduce using rule 32 (colocar1 -> SEMICOLON .)
    END             reduce using rule 32 (colocar1 -> SEMICOLON .)
    KEND            reduce using rule 32 (colocar1 -> SEMICOLON .)
    ENDPROC         reduce using rule 32 (colocar1 -> SEMICOLON .)
    FEND            reduce using rule 32 (colocar1 -> SEMICOLON .)
    WHEND           reduce using rule 32 (colocar1 -> SEMICOLON .)


state 81

    (33) colocar1 -> NUM . SEMICOLON

    SEMICOLON       shift and go to state 101


state 82

    (34) elevar -> HIGH BLOCK elevar1 .

    SKIP            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    COMMENT         reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    SET             reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    ADD             reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    LESS            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    CHANGEDIR       reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    PLACE           reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    HIGH            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    PUT             reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    POS             reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    POSSTART        reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    CALL            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    KEEP            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    FOR             reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    WHEN            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    END             reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    KEND            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    ENDPROC         reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    FEND            reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)
    WHEND           reduce using rule 34 (elevar -> HIGH BLOCK elevar1 .)


state 83

    (35) elevar1 -> SEMICOLON .

    SKIP            reduce using rule 35 (elevar1 -> SEMICOLON .)
    COMMENT         reduce using rule 35 (elevar1 -> SEMICOLON .)
    SET             reduce using rule 35 (elevar1 -> SEMICOLON .)
    ADD             reduce using rule 35 (elevar1 -> SEMICOLON .)
    LESS            reduce using rule 35 (elevar1 -> SEMICOLON .)
    CHANGEDIR       reduce using rule 35 (elevar1 -> SEMICOLON .)
    PLACE           reduce using rule 35 (elevar1 -> SEMICOLON .)
    HIGH            reduce using rule 35 (elevar1 -> SEMICOLON .)
    PUT             reduce using rule 35 (elevar1 -> SEMICOLON .)
    POS             reduce using rule 35 (elevar1 -> SEMICOLON .)
    POSSTART        reduce using rule 35 (elevar1 -> SEMICOLON .)
    CALL            reduce using rule 35 (elevar1 -> SEMICOLON .)
    KEEP            reduce using rule 35 (elevar1 -> SEMICOLON .)
    FOR             reduce using rule 35 (elevar1 -> SEMICOLON .)
    WHEN            reduce using rule 35 (elevar1 -> SEMICOLON .)
    END             reduce using rule 35 (elevar1 -> SEMICOLON .)
    KEND            reduce using rule 35 (elevar1 -> SEMICOLON .)
    ENDPROC         reduce using rule 35 (elevar1 -> SEMICOLON .)
    FEND            reduce using rule 35 (elevar1 -> SEMICOLON .)
    WHEND           reduce using rule 35 (elevar1 -> SEMICOLON .)


state 84

    (36) elevar1 -> NUM . SEMICOLON

    SEMICOLON       shift and go to state 102


state 85

    (37) encender -> PUT LIGHT SEMICOLON .

    SKIP            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    COMMENT         reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    SET             reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    ADD             reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    LESS            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    CHANGEDIR       reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    PLACE           reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    HIGH            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    PUT             reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    POS             reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    POSSTART        reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    CALL            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    KEEP            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    FOR             reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    WHEN            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    END             reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    KEND            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    ENDPROC         reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    FEND            reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)
    WHEND           reduce using rule 37 (encender -> PUT LIGHT SEMICOLON .)


state 86

    (38) mover -> POS LPAR NUM . COMMA NUM RPAR SEMICOLON

    COMMA           shift and go to state 103


state 87

    (39) pos_inicio -> POSSTART LPAR NUM . COMMA NUM RPAR SEMICOLON

    COMMA           shift and go to state 104


state 88

    (40) llamar -> CALL ID SEMICOLON .

    SKIP            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    COMMENT         reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    SET             reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    ADD             reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    LESS            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    CHANGEDIR       reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    PLACE           reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    HIGH            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    PUT             reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    POS             reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    POSSTART        reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    CALL            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    KEEP            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    FOR             reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    WHEN            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    END             reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    KEND            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    ENDPROC         reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    FEND            reduce using rule 40 (llamar -> CALL ID SEMICOLON .)
    WHEND           reduce using rule 40 (llamar -> CALL ID SEMICOLON .)


state 89

    (22) c_keep -> KEEP expresiones KEND . SEMICOLON

    SEMICOLON       shift and go to state 105


state 90

    (20) c_for -> FOR ID ASSIGN . NUM TIMES expresiones FEND SEMICOLON

    NUM             shift and go to state 106


state 91

    (21) c_when -> WHEN ID ASSIGN . NUM THEN expresiones WHEND SEMICOLON

    NUM             shift and go to state 107


state 92

    (3) variable1 -> ID ASSIGN NUM SEMICOLON .

    BEGIN           reduce using rule 3 (variable1 -> ID ASSIGN NUM SEMICOLON .)


state 93

    (41) procedimientos -> PROC ID . expresiones ENDPROC SEMICOLON
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    ENDPROC         reduce using rule 43 (epsilon -> .)

    expresiones                    shift and go to state 108
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 94

    (23) asignar -> SET ID ASSIGN NUM . SEMICOLON

    SEMICOLON       shift and go to state 109


state 95

    (24) actualizar -> ADD SUM ID SEMICOLON .

    SKIP            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    COMMENT         reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    SET             reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    ADD             reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    LESS            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    CHANGEDIR       reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    PLACE           reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    HIGH            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    PUT             reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    POS             reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    POSSTART        reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    CALL            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    KEEP            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    FOR             reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    WHEN            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    END             reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    KEND            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    ENDPROC         reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    FEND            reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)
    WHEND           reduce using rule 24 (actualizar -> ADD SUM ID SEMICOLON .)


state 96

    (25) actualizar -> LESS SUM ID SEMICOLON .

    SKIP            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    COMMENT         reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    SET             reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    ADD             reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    LESS            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    CHANGEDIR       reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    PLACE           reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    HIGH            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    PUT             reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    POS             reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    POSSTART        reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    CALL            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    KEEP            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    FOR             reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    WHEN            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    END             reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    KEND            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    ENDPROC         reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    FEND            reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)
    WHEND           reduce using rule 25 (actualizar -> LESS SUM ID SEMICOLON .)


state 97

    (27) direccion -> LEFT RPAR .

    SKIP            reduce using rule 27 (direccion -> LEFT RPAR .)
    COMMENT         reduce using rule 27 (direccion -> LEFT RPAR .)
    SET             reduce using rule 27 (direccion -> LEFT RPAR .)
    ADD             reduce using rule 27 (direccion -> LEFT RPAR .)
    LESS            reduce using rule 27 (direccion -> LEFT RPAR .)
    CHANGEDIR       reduce using rule 27 (direccion -> LEFT RPAR .)
    PLACE           reduce using rule 27 (direccion -> LEFT RPAR .)
    HIGH            reduce using rule 27 (direccion -> LEFT RPAR .)
    PUT             reduce using rule 27 (direccion -> LEFT RPAR .)
    POS             reduce using rule 27 (direccion -> LEFT RPAR .)
    POSSTART        reduce using rule 27 (direccion -> LEFT RPAR .)
    CALL            reduce using rule 27 (direccion -> LEFT RPAR .)
    KEEP            reduce using rule 27 (direccion -> LEFT RPAR .)
    FOR             reduce using rule 27 (direccion -> LEFT RPAR .)
    WHEN            reduce using rule 27 (direccion -> LEFT RPAR .)
    END             reduce using rule 27 (direccion -> LEFT RPAR .)
    KEND            reduce using rule 27 (direccion -> LEFT RPAR .)
    ENDPROC         reduce using rule 27 (direccion -> LEFT RPAR .)
    FEND            reduce using rule 27 (direccion -> LEFT RPAR .)
    WHEND           reduce using rule 27 (direccion -> LEFT RPAR .)


state 98

    (28) direccion -> RIGHT RPAR .

    SKIP            reduce using rule 28 (direccion -> RIGHT RPAR .)
    COMMENT         reduce using rule 28 (direccion -> RIGHT RPAR .)
    SET             reduce using rule 28 (direccion -> RIGHT RPAR .)
    ADD             reduce using rule 28 (direccion -> RIGHT RPAR .)
    LESS            reduce using rule 28 (direccion -> RIGHT RPAR .)
    CHANGEDIR       reduce using rule 28 (direccion -> RIGHT RPAR .)
    PLACE           reduce using rule 28 (direccion -> RIGHT RPAR .)
    HIGH            reduce using rule 28 (direccion -> RIGHT RPAR .)
    PUT             reduce using rule 28 (direccion -> RIGHT RPAR .)
    POS             reduce using rule 28 (direccion -> RIGHT RPAR .)
    POSSTART        reduce using rule 28 (direccion -> RIGHT RPAR .)
    CALL            reduce using rule 28 (direccion -> RIGHT RPAR .)
    KEEP            reduce using rule 28 (direccion -> RIGHT RPAR .)
    FOR             reduce using rule 28 (direccion -> RIGHT RPAR .)
    WHEN            reduce using rule 28 (direccion -> RIGHT RPAR .)
    END             reduce using rule 28 (direccion -> RIGHT RPAR .)
    KEND            reduce using rule 28 (direccion -> RIGHT RPAR .)
    ENDPROC         reduce using rule 28 (direccion -> RIGHT RPAR .)
    FEND            reduce using rule 28 (direccion -> RIGHT RPAR .)
    WHEND           reduce using rule 28 (direccion -> RIGHT RPAR .)


state 99

    (29) direccion -> BACK RPAR .

    SKIP            reduce using rule 29 (direccion -> BACK RPAR .)
    COMMENT         reduce using rule 29 (direccion -> BACK RPAR .)
    SET             reduce using rule 29 (direccion -> BACK RPAR .)
    ADD             reduce using rule 29 (direccion -> BACK RPAR .)
    LESS            reduce using rule 29 (direccion -> BACK RPAR .)
    CHANGEDIR       reduce using rule 29 (direccion -> BACK RPAR .)
    PLACE           reduce using rule 29 (direccion -> BACK RPAR .)
    HIGH            reduce using rule 29 (direccion -> BACK RPAR .)
    PUT             reduce using rule 29 (direccion -> BACK RPAR .)
    POS             reduce using rule 29 (direccion -> BACK RPAR .)
    POSSTART        reduce using rule 29 (direccion -> BACK RPAR .)
    CALL            reduce using rule 29 (direccion -> BACK RPAR .)
    KEEP            reduce using rule 29 (direccion -> BACK RPAR .)
    FOR             reduce using rule 29 (direccion -> BACK RPAR .)
    WHEN            reduce using rule 29 (direccion -> BACK RPAR .)
    END             reduce using rule 29 (direccion -> BACK RPAR .)
    KEND            reduce using rule 29 (direccion -> BACK RPAR .)
    ENDPROC         reduce using rule 29 (direccion -> BACK RPAR .)
    FEND            reduce using rule 29 (direccion -> BACK RPAR .)
    WHEND           reduce using rule 29 (direccion -> BACK RPAR .)


state 100

    (30) direccion -> SAME RPAR .

    SKIP            reduce using rule 30 (direccion -> SAME RPAR .)
    COMMENT         reduce using rule 30 (direccion -> SAME RPAR .)
    SET             reduce using rule 30 (direccion -> SAME RPAR .)
    ADD             reduce using rule 30 (direccion -> SAME RPAR .)
    LESS            reduce using rule 30 (direccion -> SAME RPAR .)
    CHANGEDIR       reduce using rule 30 (direccion -> SAME RPAR .)
    PLACE           reduce using rule 30 (direccion -> SAME RPAR .)
    HIGH            reduce using rule 30 (direccion -> SAME RPAR .)
    PUT             reduce using rule 30 (direccion -> SAME RPAR .)
    POS             reduce using rule 30 (direccion -> SAME RPAR .)
    POSSTART        reduce using rule 30 (direccion -> SAME RPAR .)
    CALL            reduce using rule 30 (direccion -> SAME RPAR .)
    KEEP            reduce using rule 30 (direccion -> SAME RPAR .)
    FOR             reduce using rule 30 (direccion -> SAME RPAR .)
    WHEN            reduce using rule 30 (direccion -> SAME RPAR .)
    END             reduce using rule 30 (direccion -> SAME RPAR .)
    KEND            reduce using rule 30 (direccion -> SAME RPAR .)
    ENDPROC         reduce using rule 30 (direccion -> SAME RPAR .)
    FEND            reduce using rule 30 (direccion -> SAME RPAR .)
    WHEND           reduce using rule 30 (direccion -> SAME RPAR .)


state 101

    (33) colocar1 -> NUM SEMICOLON .

    SKIP            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    COMMENT         reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    SET             reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    ADD             reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    LESS            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    CHANGEDIR       reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    PLACE           reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    HIGH            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    PUT             reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    POS             reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    POSSTART        reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    CALL            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    KEEP            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    FOR             reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    WHEN            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    END             reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    KEND            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    ENDPROC         reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    FEND            reduce using rule 33 (colocar1 -> NUM SEMICOLON .)
    WHEND           reduce using rule 33 (colocar1 -> NUM SEMICOLON .)


state 102

    (36) elevar1 -> NUM SEMICOLON .

    SKIP            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    COMMENT         reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    SET             reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    ADD             reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    LESS            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    CHANGEDIR       reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    PLACE           reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    HIGH            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    PUT             reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    POS             reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    POSSTART        reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    CALL            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    KEEP            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    FOR             reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    WHEN            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    END             reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    KEND            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    ENDPROC         reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    FEND            reduce using rule 36 (elevar1 -> NUM SEMICOLON .)
    WHEND           reduce using rule 36 (elevar1 -> NUM SEMICOLON .)


state 103

    (38) mover -> POS LPAR NUM COMMA . NUM RPAR SEMICOLON

    NUM             shift and go to state 110


state 104

    (39) pos_inicio -> POSSTART LPAR NUM COMMA . NUM RPAR SEMICOLON

    NUM             shift and go to state 111


state 105

    (22) c_keep -> KEEP expresiones KEND SEMICOLON .

    SKIP            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    COMMENT         reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    SET             reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    ADD             reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    LESS            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    CHANGEDIR       reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    PLACE           reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    HIGH            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    PUT             reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    POS             reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    POSSTART        reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    CALL            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    KEEP            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    FOR             reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    WHEN            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    END             reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    KEND            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    ENDPROC         reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    FEND            reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)
    WHEND           reduce using rule 22 (c_keep -> KEEP expresiones KEND SEMICOLON .)


state 106

    (20) c_for -> FOR ID ASSIGN NUM . TIMES expresiones FEND SEMICOLON

    TIMES           shift and go to state 112


state 107

    (21) c_when -> WHEN ID ASSIGN NUM . THEN expresiones WHEND SEMICOLON

    THEN            shift and go to state 113


state 108

    (41) procedimientos -> PROC ID expresiones . ENDPROC SEMICOLON

    ENDPROC         shift and go to state 114


state 109

    (23) asignar -> SET ID ASSIGN NUM SEMICOLON .

    SKIP            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    COMMENT         reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    SET             reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    ADD             reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    LESS            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    CHANGEDIR       reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    PLACE           reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    HIGH            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    PUT             reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    POS             reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    POSSTART        reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    CALL            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    KEEP            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    FOR             reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    WHEN            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    END             reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    KEND            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    ENDPROC         reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    FEND            reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    WHEND           reduce using rule 23 (asignar -> SET ID ASSIGN NUM SEMICOLON .)


state 110

    (38) mover -> POS LPAR NUM COMMA NUM . RPAR SEMICOLON

    RPAR            shift and go to state 115


state 111

    (39) pos_inicio -> POSSTART LPAR NUM COMMA NUM . RPAR SEMICOLON

    RPAR            shift and go to state 116


state 112

    (20) c_for -> FOR ID ASSIGN NUM TIMES . expresiones FEND SEMICOLON
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    FEND            reduce using rule 43 (epsilon -> .)

    expresiones                    shift and go to state 117
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 113

    (21) c_when -> WHEN ID ASSIGN NUM THEN . expresiones WHEND SEMICOLON
    (5) expresiones -> . asignar expresiones
    (6) expresiones -> . actualizar expresiones
    (7) expresiones -> . cambiar_direccion expresiones
    (8) expresiones -> . colocar expresiones
    (9) expresiones -> . elevar expresiones
    (10) expresiones -> . encender expresiones
    (11) expresiones -> . mover expresiones
    (12) expresiones -> . pos_inicio expresiones
    (13) expresiones -> . llamar expresiones
    (14) expresiones -> . c_keep expresiones
    (15) expresiones -> . c_for expresiones
    (16) expresiones -> . c_when expresiones
    (17) expresiones -> . SKIP SEMICOLON expresiones
    (18) expresiones -> . COMMENT expresiones
    (19) expresiones -> . epsilon
    (23) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (24) actualizar -> . ADD SUM ID SEMICOLON
    (25) actualizar -> . LESS SUM ID SEMICOLON
    (26) cambiar_direccion -> . CHANGEDIR LPAR direccion
    (31) colocar -> . PLACE BLOCK colocar1
    (34) elevar -> . HIGH BLOCK elevar1
    (37) encender -> . PUT LIGHT SEMICOLON
    (38) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (39) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (40) llamar -> . CALL ID SEMICOLON
    (22) c_keep -> . KEEP expresiones KEND SEMICOLON
    (20) c_for -> . FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON
    (21) c_when -> . WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON
    (43) epsilon -> .

    SKIP            shift and go to state 20
    COMMENT         shift and go to state 21
    SET             shift and go to state 23
    ADD             shift and go to state 24
    LESS            shift and go to state 25
    CHANGEDIR       shift and go to state 26
    PLACE           shift and go to state 27
    HIGH            shift and go to state 28
    PUT             shift and go to state 29
    POS             shift and go to state 30
    POSSTART        shift and go to state 31
    CALL            shift and go to state 32
    KEEP            shift and go to state 33
    FOR             shift and go to state 34
    WHEN            shift and go to state 35
    WHEND           reduce using rule 43 (epsilon -> .)

    expresiones                    shift and go to state 118
    asignar                        shift and go to state 8
    actualizar                     shift and go to state 9
    cambiar_direccion              shift and go to state 10
    colocar                        shift and go to state 11
    elevar                         shift and go to state 12
    encender                       shift and go to state 13
    mover                          shift and go to state 14
    pos_inicio                     shift and go to state 15
    llamar                         shift and go to state 16
    c_keep                         shift and go to state 17
    c_for                          shift and go to state 18
    c_when                         shift and go to state 19
    epsilon                        shift and go to state 22

state 114

    (41) procedimientos -> PROC ID expresiones ENDPROC . SEMICOLON

    SEMICOLON       shift and go to state 119


state 115

    (38) mover -> POS LPAR NUM COMMA NUM RPAR . SEMICOLON

    SEMICOLON       shift and go to state 120


state 116

    (39) pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR . SEMICOLON

    SEMICOLON       shift and go to state 121


state 117

    (20) c_for -> FOR ID ASSIGN NUM TIMES expresiones . FEND SEMICOLON

    FEND            shift and go to state 122


state 118

    (21) c_when -> WHEN ID ASSIGN NUM THEN expresiones . WHEND SEMICOLON

    WHEND           shift and go to state 123


state 119

    (41) procedimientos -> PROC ID expresiones ENDPROC SEMICOLON .

    $end            reduce using rule 41 (procedimientos -> PROC ID expresiones ENDPROC SEMICOLON .)


state 120

    (38) mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .

    SKIP            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    COMMENT         reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    SET             reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ADD             reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    LESS            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PLACE           reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    HIGH            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PUT             reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POS             reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POSSTART        reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CALL            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEEP            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FOR             reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEN            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    END             reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEND            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ENDPROC         reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FEND            reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEND           reduce using rule 38 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)


state 121

    (39) pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .

    SKIP            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    COMMENT         reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    SET             reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ADD             reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    LESS            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PLACE           reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    HIGH            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PUT             reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POS             reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POSSTART        reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CALL            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEEP            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FOR             reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEN            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    END             reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEND            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ENDPROC         reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FEND            reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEND           reduce using rule 39 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)


state 122

    (20) c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND . SEMICOLON

    SEMICOLON       shift and go to state 124


state 123

    (21) c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND . SEMICOLON

    SEMICOLON       shift and go to state 125


state 124

    (20) c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .

    SKIP            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    COMMENT         reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    SET             reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    ADD             reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    LESS            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    CHANGEDIR       reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    PLACE           reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    HIGH            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    PUT             reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    POS             reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    POSSTART        reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    CALL            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    KEEP            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    FOR             reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    WHEN            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    END             reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    KEND            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    ENDPROC         reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    FEND            reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)
    WHEND           reduce using rule 20 (c_for -> FOR ID ASSIGN NUM TIMES expresiones FEND SEMICOLON .)


state 125

    (21) c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .

    SKIP            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    COMMENT         reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    SET             reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    ADD             reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    LESS            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    CHANGEDIR       reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    PLACE           reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    HIGH            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    PUT             reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    POS             reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    POSSTART        reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    CALL            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    KEEP            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    FOR             reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    WHEN            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    END             reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    KEND            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    ENDPROC         reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    FEND            reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)
    WHEND           reduce using rule 21 (c_when -> WHEN ID ASSIGN NUM THEN expresiones WHEND SEMICOLON .)

