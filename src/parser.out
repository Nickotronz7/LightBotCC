Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EOL
    ESPECIAL
    LBRA
    LCBRA
    MATHEXPR
    QUOTE
    RBRA
    RCBRA
    RES
    WHITESPACE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> variable begin expresiones end procedimientos
Rule 2     begin -> BEGIN
Rule 3     end -> END
Rule 4     variable -> variable1 var1
Rule 5     var1 -> variable1 variable
Rule 6     var1 -> epsilon
Rule 7     variable1 -> VAR ID ASSIGN NUM SEMICOLON
Rule 8     variable1 -> VAR ID SEMICOLON
Rule 9     expresiones -> asignar expresiones
Rule 10    expresiones -> actualizar expresiones
Rule 11    expresiones -> cambiar_direccion expresiones
Rule 12    expresiones -> colocar expresiones
Rule 13    expresiones -> elevar expresiones
Rule 14    expresiones -> encender expresiones
Rule 15    expresiones -> mover expresiones
Rule 16    expresiones -> pos_inicio expresiones
Rule 17    expresiones -> llamar expresiones
Rule 18    expresiones -> c_keep expresiones
Rule 19    expresiones -> c_for expresiones
Rule 20    expresiones -> c_when expresiones
Rule 21    expresiones -> skip expresiones
Rule 22    skip -> SKIP SEMICOLON
Rule 23    expresiones -> COMMENT expresiones
Rule 24    expresiones -> endproc procedimientos
Rule 25    endproc -> ENDPROC SEMICOLON
Rule 26    expresiones -> whend expresiones
Rule 27    expresiones -> epsilon
Rule 28    c_for -> FOR ID ASSIGN NUM TIMES
Rule 29    expresiones -> fend expresiones
Rule 30    fend -> FEND SEMICOLON
Rule 31    c_when -> WHEN ID ASSIGN NUM THEN
Rule 32    whend -> WHEND SEMICOLON
Rule 33    c_keep -> KEEP
Rule 34    expresiones -> kend expresiones
Rule 35    kend -> KEND SEMICOLON
Rule 36    asignar -> SET ID ASSIGN NUM SEMICOLON
Rule 37    actualizar -> ADD SUM ID SEMICOLON
Rule 38    actualizar -> LESS SUM ID SEMICOLON
Rule 39    cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON
Rule 40    cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON
Rule 41    cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON
Rule 42    cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON
Rule 43    colocar -> PLACE BLOCK SEMICOLON
Rule 44    colocar -> PLACE BLOCK NUM SEMICOLON
Rule 45    elevar -> HIGH BLOCK SEMICOLON
Rule 46    elevar -> HIGH BLOCK NUM SEMICOLON
Rule 47    encender -> PUT LIGHT SEMICOLON
Rule 48    mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON
Rule 49    pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
Rule 50    llamar -> CALL ID
Rule 51    procedimientos -> procs expresiones
Rule 52    procs -> PROC ID
Rule 53    procs -> epsilon
Rule 54    epsilon -> <empty>

Terminals, with rules where they appear

ADD                  : 37
ASSIGN               : 7 28 31 36
BACK                 : 41
BEGIN                : 2
BLOCK                : 43 44 45 46
CALL                 : 50
CHANGEDIR            : 39 40 41 42
COMMA                : 48 49
COMMENT              : 23
END                  : 3
ENDPROC              : 25
EOL                  : 
ESPECIAL             : 
FEND                 : 30
FOR                  : 28
HIGH                 : 45 46
ID                   : 7 8 28 31 36 37 38 50 52
KEEP                 : 33
KEND                 : 35
LBRA                 : 
LCBRA                : 
LEFT                 : 39
LESS                 : 38
LIGHT                : 47
LPAR                 : 39 40 41 42 48 49
MATHEXPR             : 
NUM                  : 7 28 31 36 44 46 48 48 49 49
PLACE                : 43 44
POS                  : 48
POSSTART             : 49
PROC                 : 52
PUT                  : 47
QUOTE                : 
RBRA                 : 
RCBRA                : 
RES                  : 
RIGHT                : 40
RPAR                 : 39 40 41 42 48 49
SAME                 : 42
SEMICOLON            : 7 8 22 25 30 32 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
SET                  : 36
SKIP                 : 22
SUM                  : 37 38
THEN                 : 31
TIMES                : 28
VAR                  : 7 8
WHEN                 : 31
WHEND                : 32
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

actualizar           : 10
asignar              : 9
begin                : 1
c_for                : 19
c_keep               : 18
c_when               : 20
cambiar_direccion    : 11
colocar              : 12
elevar               : 13
encender             : 14
end                  : 1
endproc              : 24
epsilon              : 6 27 53
expresiones          : 1 9 10 11 12 13 14 15 16 17 18 19 20 21 23 26 29 34 51
fend                 : 29
kend                 : 34
llamar               : 17
mover                : 15
pos_inicio           : 16
procedimientos       : 1 24
procs                : 51
programa             : 0
skip                 : 21
var1                 : 4
variable             : 1 5
variable1            : 4 5
whend                : 26

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . variable begin expresiones end procedimientos
    (4) variable -> . variable1 var1
    (7) variable1 -> . VAR ID ASSIGN NUM SEMICOLON
    (8) variable1 -> . VAR ID SEMICOLON

    VAR             shift and go to state 4

    programa                       shift and go to state 1
    variable                       shift and go to state 2
    variable1                      shift and go to state 3

state 1

    (0) S' -> programa .



state 2

    (1) programa -> variable . begin expresiones end procedimientos
    (2) begin -> . BEGIN

    BEGIN           shift and go to state 6

    begin                          shift and go to state 5

state 3

    (4) variable -> variable1 . var1
    (5) var1 -> . variable1 variable
    (6) var1 -> . epsilon
    (7) variable1 -> . VAR ID ASSIGN NUM SEMICOLON
    (8) variable1 -> . VAR ID SEMICOLON
    (54) epsilon -> .

    VAR             shift and go to state 4
    BEGIN           reduce using rule 54 (epsilon -> .)

    variable1                      shift and go to state 7
    var1                           shift and go to state 8
    epsilon                        shift and go to state 9

state 4

    (7) variable1 -> VAR . ID ASSIGN NUM SEMICOLON
    (8) variable1 -> VAR . ID SEMICOLON

    ID              shift and go to state 10


state 5

    (1) programa -> variable begin . expresiones end procedimientos
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    expresiones                    shift and go to state 11
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 6

    (2) begin -> BEGIN .

    COMMENT         reduce using rule 2 (begin -> BEGIN .)
    SET             reduce using rule 2 (begin -> BEGIN .)
    ADD             reduce using rule 2 (begin -> BEGIN .)
    LESS            reduce using rule 2 (begin -> BEGIN .)
    CHANGEDIR       reduce using rule 2 (begin -> BEGIN .)
    PLACE           reduce using rule 2 (begin -> BEGIN .)
    HIGH            reduce using rule 2 (begin -> BEGIN .)
    PUT             reduce using rule 2 (begin -> BEGIN .)
    POS             reduce using rule 2 (begin -> BEGIN .)
    POSSTART        reduce using rule 2 (begin -> BEGIN .)
    CALL            reduce using rule 2 (begin -> BEGIN .)
    KEEP            reduce using rule 2 (begin -> BEGIN .)
    FOR             reduce using rule 2 (begin -> BEGIN .)
    WHEN            reduce using rule 2 (begin -> BEGIN .)
    SKIP            reduce using rule 2 (begin -> BEGIN .)
    ENDPROC         reduce using rule 2 (begin -> BEGIN .)
    WHEND           reduce using rule 2 (begin -> BEGIN .)
    FEND            reduce using rule 2 (begin -> BEGIN .)
    KEND            reduce using rule 2 (begin -> BEGIN .)
    END             reduce using rule 2 (begin -> BEGIN .)


state 7

    (5) var1 -> variable1 . variable
    (4) variable -> . variable1 var1
    (7) variable1 -> . VAR ID ASSIGN NUM SEMICOLON
    (8) variable1 -> . VAR ID SEMICOLON

    VAR             shift and go to state 4

    variable1                      shift and go to state 3
    variable                       shift and go to state 49

state 8

    (4) variable -> variable1 var1 .

    BEGIN           reduce using rule 4 (variable -> variable1 var1 .)


state 9

    (6) var1 -> epsilon .

    BEGIN           reduce using rule 6 (var1 -> epsilon .)


state 10

    (7) variable1 -> VAR ID . ASSIGN NUM SEMICOLON
    (8) variable1 -> VAR ID . SEMICOLON

    ASSIGN          shift and go to state 50
    SEMICOLON       shift and go to state 51


state 11

    (1) programa -> variable begin expresiones . end procedimientos
    (3) end -> . END

    END             shift and go to state 53

    end                            shift and go to state 52

state 12

    (9) expresiones -> asignar . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    asignar                        shift and go to state 12
    expresiones                    shift and go to state 54
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 13

    (10) expresiones -> actualizar . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    actualizar                     shift and go to state 13
    expresiones                    shift and go to state 55
    asignar                        shift and go to state 12
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 14

    (11) expresiones -> cambiar_direccion . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    cambiar_direccion              shift and go to state 14
    expresiones                    shift and go to state 56
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 15

    (12) expresiones -> colocar . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    colocar                        shift and go to state 15
    expresiones                    shift and go to state 57
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 16

    (13) expresiones -> elevar . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    elevar                         shift and go to state 16
    expresiones                    shift and go to state 58
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 17

    (14) expresiones -> encender . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    encender                       shift and go to state 17
    expresiones                    shift and go to state 59
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 18

    (15) expresiones -> mover . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    mover                          shift and go to state 18
    expresiones                    shift and go to state 60
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 19

    (16) expresiones -> pos_inicio . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    pos_inicio                     shift and go to state 19
    expresiones                    shift and go to state 61
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 20

    (17) expresiones -> llamar . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    llamar                         shift and go to state 20
    expresiones                    shift and go to state 62
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 21

    (18) expresiones -> c_keep . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    c_keep                         shift and go to state 21
    expresiones                    shift and go to state 63
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 22

    (19) expresiones -> c_for . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    c_for                          shift and go to state 22
    expresiones                    shift and go to state 64
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 23

    (20) expresiones -> c_when . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    c_when                         shift and go to state 23
    expresiones                    shift and go to state 65
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 24

    (21) expresiones -> skip . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    skip                           shift and go to state 24
    expresiones                    shift and go to state 66
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 25

    (23) expresiones -> COMMENT . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    expresiones                    shift and go to state 67
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 26

    (24) expresiones -> endproc . procedimientos
    (51) procedimientos -> . procs expresiones
    (52) procs -> . PROC ID
    (53) procs -> . epsilon
    (54) epsilon -> .

    PROC            shift and go to state 70
    COMMENT         reduce using rule 54 (epsilon -> .)
    SET             reduce using rule 54 (epsilon -> .)
    ADD             reduce using rule 54 (epsilon -> .)
    LESS            reduce using rule 54 (epsilon -> .)
    CHANGEDIR       reduce using rule 54 (epsilon -> .)
    PLACE           reduce using rule 54 (epsilon -> .)
    HIGH            reduce using rule 54 (epsilon -> .)
    PUT             reduce using rule 54 (epsilon -> .)
    POS             reduce using rule 54 (epsilon -> .)
    POSSTART        reduce using rule 54 (epsilon -> .)
    CALL            reduce using rule 54 (epsilon -> .)
    KEEP            reduce using rule 54 (epsilon -> .)
    FOR             reduce using rule 54 (epsilon -> .)
    WHEN            reduce using rule 54 (epsilon -> .)
    SKIP            reduce using rule 54 (epsilon -> .)
    ENDPROC         reduce using rule 54 (epsilon -> .)
    WHEND           reduce using rule 54 (epsilon -> .)
    FEND            reduce using rule 54 (epsilon -> .)
    KEND            reduce using rule 54 (epsilon -> .)
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)

    procedimientos                 shift and go to state 68
    procs                          shift and go to state 69
    epsilon                        shift and go to state 71

state 27

    (26) expresiones -> whend . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    whend                          shift and go to state 27
    expresiones                    shift and go to state 72
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 28

    (27) expresiones -> epsilon .

    END             reduce using rule 27 (expresiones -> epsilon .)
    $end            reduce using rule 27 (expresiones -> epsilon .)


state 29

    (29) expresiones -> fend . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    fend                           shift and go to state 29
    expresiones                    shift and go to state 73
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    kend                           shift and go to state 30

state 30

    (34) expresiones -> kend . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    kend                           shift and go to state 30
    expresiones                    shift and go to state 74
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29

state 31

    (36) asignar -> SET . ID ASSIGN NUM SEMICOLON

    ID              shift and go to state 75


state 32

    (37) actualizar -> ADD . SUM ID SEMICOLON

    SUM             shift and go to state 76


state 33

    (38) actualizar -> LESS . SUM ID SEMICOLON

    SUM             shift and go to state 77


state 34

    (39) cambiar_direccion -> CHANGEDIR . LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> CHANGEDIR . LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> CHANGEDIR . LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> CHANGEDIR . LPAR SAME RPAR SEMICOLON

    LPAR            shift and go to state 78


state 35

    (43) colocar -> PLACE . BLOCK SEMICOLON
    (44) colocar -> PLACE . BLOCK NUM SEMICOLON

    BLOCK           shift and go to state 79


state 36

    (45) elevar -> HIGH . BLOCK SEMICOLON
    (46) elevar -> HIGH . BLOCK NUM SEMICOLON

    BLOCK           shift and go to state 80


state 37

    (47) encender -> PUT . LIGHT SEMICOLON

    LIGHT           shift and go to state 81


state 38

    (48) mover -> POS . LPAR NUM COMMA NUM RPAR SEMICOLON

    LPAR            shift and go to state 82


state 39

    (49) pos_inicio -> POSSTART . LPAR NUM COMMA NUM RPAR SEMICOLON

    LPAR            shift and go to state 83


state 40

    (50) llamar -> CALL . ID

    ID              shift and go to state 84


state 41

    (33) c_keep -> KEEP .

    COMMENT         reduce using rule 33 (c_keep -> KEEP .)
    SET             reduce using rule 33 (c_keep -> KEEP .)
    ADD             reduce using rule 33 (c_keep -> KEEP .)
    LESS            reduce using rule 33 (c_keep -> KEEP .)
    CHANGEDIR       reduce using rule 33 (c_keep -> KEEP .)
    PLACE           reduce using rule 33 (c_keep -> KEEP .)
    HIGH            reduce using rule 33 (c_keep -> KEEP .)
    PUT             reduce using rule 33 (c_keep -> KEEP .)
    POS             reduce using rule 33 (c_keep -> KEEP .)
    POSSTART        reduce using rule 33 (c_keep -> KEEP .)
    CALL            reduce using rule 33 (c_keep -> KEEP .)
    KEEP            reduce using rule 33 (c_keep -> KEEP .)
    FOR             reduce using rule 33 (c_keep -> KEEP .)
    WHEN            reduce using rule 33 (c_keep -> KEEP .)
    SKIP            reduce using rule 33 (c_keep -> KEEP .)
    ENDPROC         reduce using rule 33 (c_keep -> KEEP .)
    WHEND           reduce using rule 33 (c_keep -> KEEP .)
    FEND            reduce using rule 33 (c_keep -> KEEP .)
    KEND            reduce using rule 33 (c_keep -> KEEP .)
    END             reduce using rule 33 (c_keep -> KEEP .)
    $end            reduce using rule 33 (c_keep -> KEEP .)


state 42

    (28) c_for -> FOR . ID ASSIGN NUM TIMES

    ID              shift and go to state 85


state 43

    (31) c_when -> WHEN . ID ASSIGN NUM THEN

    ID              shift and go to state 86


state 44

    (22) skip -> SKIP . SEMICOLON

    SEMICOLON       shift and go to state 87


state 45

    (25) endproc -> ENDPROC . SEMICOLON

    SEMICOLON       shift and go to state 88


state 46

    (32) whend -> WHEND . SEMICOLON

    SEMICOLON       shift and go to state 89


state 47

    (30) fend -> FEND . SEMICOLON

    SEMICOLON       shift and go to state 90


state 48

    (35) kend -> KEND . SEMICOLON

    SEMICOLON       shift and go to state 91


state 49

    (5) var1 -> variable1 variable .

    BEGIN           reduce using rule 5 (var1 -> variable1 variable .)


state 50

    (7) variable1 -> VAR ID ASSIGN . NUM SEMICOLON

    NUM             shift and go to state 92


state 51

    (8) variable1 -> VAR ID SEMICOLON .

    VAR             reduce using rule 8 (variable1 -> VAR ID SEMICOLON .)
    BEGIN           reduce using rule 8 (variable1 -> VAR ID SEMICOLON .)


state 52

    (1) programa -> variable begin expresiones end . procedimientos
    (51) procedimientos -> . procs expresiones
    (52) procs -> . PROC ID
    (53) procs -> . epsilon
    (54) epsilon -> .

    PROC            shift and go to state 70
    COMMENT         reduce using rule 54 (epsilon -> .)
    SET             reduce using rule 54 (epsilon -> .)
    ADD             reduce using rule 54 (epsilon -> .)
    LESS            reduce using rule 54 (epsilon -> .)
    CHANGEDIR       reduce using rule 54 (epsilon -> .)
    PLACE           reduce using rule 54 (epsilon -> .)
    HIGH            reduce using rule 54 (epsilon -> .)
    PUT             reduce using rule 54 (epsilon -> .)
    POS             reduce using rule 54 (epsilon -> .)
    POSSTART        reduce using rule 54 (epsilon -> .)
    CALL            reduce using rule 54 (epsilon -> .)
    KEEP            reduce using rule 54 (epsilon -> .)
    FOR             reduce using rule 54 (epsilon -> .)
    WHEN            reduce using rule 54 (epsilon -> .)
    SKIP            reduce using rule 54 (epsilon -> .)
    ENDPROC         reduce using rule 54 (epsilon -> .)
    WHEND           reduce using rule 54 (epsilon -> .)
    FEND            reduce using rule 54 (epsilon -> .)
    KEND            reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)

    procedimientos                 shift and go to state 93
    procs                          shift and go to state 69
    epsilon                        shift and go to state 71

state 53

    (3) end -> END .

    PROC            reduce using rule 3 (end -> END .)
    COMMENT         reduce using rule 3 (end -> END .)
    SET             reduce using rule 3 (end -> END .)
    ADD             reduce using rule 3 (end -> END .)
    LESS            reduce using rule 3 (end -> END .)
    CHANGEDIR       reduce using rule 3 (end -> END .)
    PLACE           reduce using rule 3 (end -> END .)
    HIGH            reduce using rule 3 (end -> END .)
    PUT             reduce using rule 3 (end -> END .)
    POS             reduce using rule 3 (end -> END .)
    POSSTART        reduce using rule 3 (end -> END .)
    CALL            reduce using rule 3 (end -> END .)
    KEEP            reduce using rule 3 (end -> END .)
    FOR             reduce using rule 3 (end -> END .)
    WHEN            reduce using rule 3 (end -> END .)
    SKIP            reduce using rule 3 (end -> END .)
    ENDPROC         reduce using rule 3 (end -> END .)
    WHEND           reduce using rule 3 (end -> END .)
    FEND            reduce using rule 3 (end -> END .)
    KEND            reduce using rule 3 (end -> END .)
    $end            reduce using rule 3 (end -> END .)


state 54

    (9) expresiones -> asignar expresiones .

    END             reduce using rule 9 (expresiones -> asignar expresiones .)
    $end            reduce using rule 9 (expresiones -> asignar expresiones .)


state 55

    (10) expresiones -> actualizar expresiones .

    END             reduce using rule 10 (expresiones -> actualizar expresiones .)
    $end            reduce using rule 10 (expresiones -> actualizar expresiones .)


state 56

    (11) expresiones -> cambiar_direccion expresiones .

    END             reduce using rule 11 (expresiones -> cambiar_direccion expresiones .)
    $end            reduce using rule 11 (expresiones -> cambiar_direccion expresiones .)


state 57

    (12) expresiones -> colocar expresiones .

    END             reduce using rule 12 (expresiones -> colocar expresiones .)
    $end            reduce using rule 12 (expresiones -> colocar expresiones .)


state 58

    (13) expresiones -> elevar expresiones .

    END             reduce using rule 13 (expresiones -> elevar expresiones .)
    $end            reduce using rule 13 (expresiones -> elevar expresiones .)


state 59

    (14) expresiones -> encender expresiones .

    END             reduce using rule 14 (expresiones -> encender expresiones .)
    $end            reduce using rule 14 (expresiones -> encender expresiones .)


state 60

    (15) expresiones -> mover expresiones .

    END             reduce using rule 15 (expresiones -> mover expresiones .)
    $end            reduce using rule 15 (expresiones -> mover expresiones .)


state 61

    (16) expresiones -> pos_inicio expresiones .

    END             reduce using rule 16 (expresiones -> pos_inicio expresiones .)
    $end            reduce using rule 16 (expresiones -> pos_inicio expresiones .)


state 62

    (17) expresiones -> llamar expresiones .

    END             reduce using rule 17 (expresiones -> llamar expresiones .)
    $end            reduce using rule 17 (expresiones -> llamar expresiones .)


state 63

    (18) expresiones -> c_keep expresiones .

    END             reduce using rule 18 (expresiones -> c_keep expresiones .)
    $end            reduce using rule 18 (expresiones -> c_keep expresiones .)


state 64

    (19) expresiones -> c_for expresiones .

    END             reduce using rule 19 (expresiones -> c_for expresiones .)
    $end            reduce using rule 19 (expresiones -> c_for expresiones .)


state 65

    (20) expresiones -> c_when expresiones .

    END             reduce using rule 20 (expresiones -> c_when expresiones .)
    $end            reduce using rule 20 (expresiones -> c_when expresiones .)


state 66

    (21) expresiones -> skip expresiones .

    END             reduce using rule 21 (expresiones -> skip expresiones .)
    $end            reduce using rule 21 (expresiones -> skip expresiones .)


state 67

    (23) expresiones -> COMMENT expresiones .

    END             reduce using rule 23 (expresiones -> COMMENT expresiones .)
    $end            reduce using rule 23 (expresiones -> COMMENT expresiones .)


state 68

    (24) expresiones -> endproc procedimientos .

    END             reduce using rule 24 (expresiones -> endproc procedimientos .)
    $end            reduce using rule 24 (expresiones -> endproc procedimientos .)


state 69

    (51) procedimientos -> procs . expresiones
    (9) expresiones -> . asignar expresiones
    (10) expresiones -> . actualizar expresiones
    (11) expresiones -> . cambiar_direccion expresiones
    (12) expresiones -> . colocar expresiones
    (13) expresiones -> . elevar expresiones
    (14) expresiones -> . encender expresiones
    (15) expresiones -> . mover expresiones
    (16) expresiones -> . pos_inicio expresiones
    (17) expresiones -> . llamar expresiones
    (18) expresiones -> . c_keep expresiones
    (19) expresiones -> . c_for expresiones
    (20) expresiones -> . c_when expresiones
    (21) expresiones -> . skip expresiones
    (23) expresiones -> . COMMENT expresiones
    (24) expresiones -> . endproc procedimientos
    (26) expresiones -> . whend expresiones
    (27) expresiones -> . epsilon
    (29) expresiones -> . fend expresiones
    (34) expresiones -> . kend expresiones
    (36) asignar -> . SET ID ASSIGN NUM SEMICOLON
    (37) actualizar -> . ADD SUM ID SEMICOLON
    (38) actualizar -> . LESS SUM ID SEMICOLON
    (39) cambiar_direccion -> . CHANGEDIR LPAR LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> . CHANGEDIR LPAR RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> . CHANGEDIR LPAR BACK RPAR SEMICOLON
    (42) cambiar_direccion -> . CHANGEDIR LPAR SAME RPAR SEMICOLON
    (43) colocar -> . PLACE BLOCK SEMICOLON
    (44) colocar -> . PLACE BLOCK NUM SEMICOLON
    (45) elevar -> . HIGH BLOCK SEMICOLON
    (46) elevar -> . HIGH BLOCK NUM SEMICOLON
    (47) encender -> . PUT LIGHT SEMICOLON
    (48) mover -> . POS LPAR NUM COMMA NUM RPAR SEMICOLON
    (49) pos_inicio -> . POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON
    (50) llamar -> . CALL ID
    (33) c_keep -> . KEEP
    (28) c_for -> . FOR ID ASSIGN NUM TIMES
    (31) c_when -> . WHEN ID ASSIGN NUM THEN
    (22) skip -> . SKIP SEMICOLON
    (25) endproc -> . ENDPROC SEMICOLON
    (32) whend -> . WHEND SEMICOLON
    (54) epsilon -> .
    (30) fend -> . FEND SEMICOLON
    (35) kend -> . KEND SEMICOLON

    COMMENT         shift and go to state 25
    SET             shift and go to state 31
    ADD             shift and go to state 32
    LESS            shift and go to state 33
    CHANGEDIR       shift and go to state 34
    PLACE           shift and go to state 35
    HIGH            shift and go to state 36
    PUT             shift and go to state 37
    POS             shift and go to state 38
    POSSTART        shift and go to state 39
    CALL            shift and go to state 40
    KEEP            shift and go to state 41
    FOR             shift and go to state 42
    WHEN            shift and go to state 43
    SKIP            shift and go to state 44
    ENDPROC         shift and go to state 45
    WHEND           shift and go to state 46
    END             reduce using rule 54 (epsilon -> .)
    $end            reduce using rule 54 (epsilon -> .)
    FEND            shift and go to state 47
    KEND            shift and go to state 48

    expresiones                    shift and go to state 94
    asignar                        shift and go to state 12
    actualizar                     shift and go to state 13
    cambiar_direccion              shift and go to state 14
    colocar                        shift and go to state 15
    elevar                         shift and go to state 16
    encender                       shift and go to state 17
    mover                          shift and go to state 18
    pos_inicio                     shift and go to state 19
    llamar                         shift and go to state 20
    c_keep                         shift and go to state 21
    c_for                          shift and go to state 22
    c_when                         shift and go to state 23
    skip                           shift and go to state 24
    endproc                        shift and go to state 26
    whend                          shift and go to state 27
    epsilon                        shift and go to state 28
    fend                           shift and go to state 29
    kend                           shift and go to state 30

state 70

    (52) procs -> PROC . ID

    ID              shift and go to state 95


state 71

    (53) procs -> epsilon .

    COMMENT         reduce using rule 53 (procs -> epsilon .)
    SET             reduce using rule 53 (procs -> epsilon .)
    ADD             reduce using rule 53 (procs -> epsilon .)
    LESS            reduce using rule 53 (procs -> epsilon .)
    CHANGEDIR       reduce using rule 53 (procs -> epsilon .)
    PLACE           reduce using rule 53 (procs -> epsilon .)
    HIGH            reduce using rule 53 (procs -> epsilon .)
    PUT             reduce using rule 53 (procs -> epsilon .)
    POS             reduce using rule 53 (procs -> epsilon .)
    POSSTART        reduce using rule 53 (procs -> epsilon .)
    CALL            reduce using rule 53 (procs -> epsilon .)
    KEEP            reduce using rule 53 (procs -> epsilon .)
    FOR             reduce using rule 53 (procs -> epsilon .)
    WHEN            reduce using rule 53 (procs -> epsilon .)
    SKIP            reduce using rule 53 (procs -> epsilon .)
    ENDPROC         reduce using rule 53 (procs -> epsilon .)
    WHEND           reduce using rule 53 (procs -> epsilon .)
    FEND            reduce using rule 53 (procs -> epsilon .)
    KEND            reduce using rule 53 (procs -> epsilon .)
    END             reduce using rule 53 (procs -> epsilon .)
    $end            reduce using rule 53 (procs -> epsilon .)


state 72

    (26) expresiones -> whend expresiones .

    END             reduce using rule 26 (expresiones -> whend expresiones .)
    $end            reduce using rule 26 (expresiones -> whend expresiones .)


state 73

    (29) expresiones -> fend expresiones .

    END             reduce using rule 29 (expresiones -> fend expresiones .)
    $end            reduce using rule 29 (expresiones -> fend expresiones .)


state 74

    (34) expresiones -> kend expresiones .

    END             reduce using rule 34 (expresiones -> kend expresiones .)
    $end            reduce using rule 34 (expresiones -> kend expresiones .)


state 75

    (36) asignar -> SET ID . ASSIGN NUM SEMICOLON

    ASSIGN          shift and go to state 96


state 76

    (37) actualizar -> ADD SUM . ID SEMICOLON

    ID              shift and go to state 97


state 77

    (38) actualizar -> LESS SUM . ID SEMICOLON

    ID              shift and go to state 98


state 78

    (39) cambiar_direccion -> CHANGEDIR LPAR . LEFT RPAR SEMICOLON
    (40) cambiar_direccion -> CHANGEDIR LPAR . RIGHT RPAR SEMICOLON
    (41) cambiar_direccion -> CHANGEDIR LPAR . BACK RPAR SEMICOLON
    (42) cambiar_direccion -> CHANGEDIR LPAR . SAME RPAR SEMICOLON

    LEFT            shift and go to state 99
    RIGHT           shift and go to state 100
    BACK            shift and go to state 101
    SAME            shift and go to state 102


state 79

    (43) colocar -> PLACE BLOCK . SEMICOLON
    (44) colocar -> PLACE BLOCK . NUM SEMICOLON

    SEMICOLON       shift and go to state 103
    NUM             shift and go to state 104


state 80

    (45) elevar -> HIGH BLOCK . SEMICOLON
    (46) elevar -> HIGH BLOCK . NUM SEMICOLON

    SEMICOLON       shift and go to state 105
    NUM             shift and go to state 106


state 81

    (47) encender -> PUT LIGHT . SEMICOLON

    SEMICOLON       shift and go to state 107


state 82

    (48) mover -> POS LPAR . NUM COMMA NUM RPAR SEMICOLON

    NUM             shift and go to state 108


state 83

    (49) pos_inicio -> POSSTART LPAR . NUM COMMA NUM RPAR SEMICOLON

    NUM             shift and go to state 109


state 84

    (50) llamar -> CALL ID .

    COMMENT         reduce using rule 50 (llamar -> CALL ID .)
    SET             reduce using rule 50 (llamar -> CALL ID .)
    ADD             reduce using rule 50 (llamar -> CALL ID .)
    LESS            reduce using rule 50 (llamar -> CALL ID .)
    CHANGEDIR       reduce using rule 50 (llamar -> CALL ID .)
    PLACE           reduce using rule 50 (llamar -> CALL ID .)
    HIGH            reduce using rule 50 (llamar -> CALL ID .)
    PUT             reduce using rule 50 (llamar -> CALL ID .)
    POS             reduce using rule 50 (llamar -> CALL ID .)
    POSSTART        reduce using rule 50 (llamar -> CALL ID .)
    CALL            reduce using rule 50 (llamar -> CALL ID .)
    KEEP            reduce using rule 50 (llamar -> CALL ID .)
    FOR             reduce using rule 50 (llamar -> CALL ID .)
    WHEN            reduce using rule 50 (llamar -> CALL ID .)
    SKIP            reduce using rule 50 (llamar -> CALL ID .)
    ENDPROC         reduce using rule 50 (llamar -> CALL ID .)
    WHEND           reduce using rule 50 (llamar -> CALL ID .)
    FEND            reduce using rule 50 (llamar -> CALL ID .)
    KEND            reduce using rule 50 (llamar -> CALL ID .)
    END             reduce using rule 50 (llamar -> CALL ID .)
    $end            reduce using rule 50 (llamar -> CALL ID .)


state 85

    (28) c_for -> FOR ID . ASSIGN NUM TIMES

    ASSIGN          shift and go to state 110


state 86

    (31) c_when -> WHEN ID . ASSIGN NUM THEN

    ASSIGN          shift and go to state 111


state 87

    (22) skip -> SKIP SEMICOLON .

    COMMENT         reduce using rule 22 (skip -> SKIP SEMICOLON .)
    SET             reduce using rule 22 (skip -> SKIP SEMICOLON .)
    ADD             reduce using rule 22 (skip -> SKIP SEMICOLON .)
    LESS            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    CHANGEDIR       reduce using rule 22 (skip -> SKIP SEMICOLON .)
    PLACE           reduce using rule 22 (skip -> SKIP SEMICOLON .)
    HIGH            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    PUT             reduce using rule 22 (skip -> SKIP SEMICOLON .)
    POS             reduce using rule 22 (skip -> SKIP SEMICOLON .)
    POSSTART        reduce using rule 22 (skip -> SKIP SEMICOLON .)
    CALL            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    KEEP            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    FOR             reduce using rule 22 (skip -> SKIP SEMICOLON .)
    WHEN            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    SKIP            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    ENDPROC         reduce using rule 22 (skip -> SKIP SEMICOLON .)
    WHEND           reduce using rule 22 (skip -> SKIP SEMICOLON .)
    FEND            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    KEND            reduce using rule 22 (skip -> SKIP SEMICOLON .)
    END             reduce using rule 22 (skip -> SKIP SEMICOLON .)
    $end            reduce using rule 22 (skip -> SKIP SEMICOLON .)


state 88

    (25) endproc -> ENDPROC SEMICOLON .

    PROC            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    COMMENT         reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    SET             reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    ADD             reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    LESS            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    CHANGEDIR       reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    PLACE           reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    HIGH            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    PUT             reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    POS             reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    POSSTART        reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    CALL            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    KEEP            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    FOR             reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    WHEN            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    SKIP            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    ENDPROC         reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    WHEND           reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    FEND            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    KEND            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    END             reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)
    $end            reduce using rule 25 (endproc -> ENDPROC SEMICOLON .)


state 89

    (32) whend -> WHEND SEMICOLON .

    COMMENT         reduce using rule 32 (whend -> WHEND SEMICOLON .)
    SET             reduce using rule 32 (whend -> WHEND SEMICOLON .)
    ADD             reduce using rule 32 (whend -> WHEND SEMICOLON .)
    LESS            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    CHANGEDIR       reduce using rule 32 (whend -> WHEND SEMICOLON .)
    PLACE           reduce using rule 32 (whend -> WHEND SEMICOLON .)
    HIGH            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    PUT             reduce using rule 32 (whend -> WHEND SEMICOLON .)
    POS             reduce using rule 32 (whend -> WHEND SEMICOLON .)
    POSSTART        reduce using rule 32 (whend -> WHEND SEMICOLON .)
    CALL            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    KEEP            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    FOR             reduce using rule 32 (whend -> WHEND SEMICOLON .)
    WHEN            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    SKIP            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    ENDPROC         reduce using rule 32 (whend -> WHEND SEMICOLON .)
    WHEND           reduce using rule 32 (whend -> WHEND SEMICOLON .)
    FEND            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    KEND            reduce using rule 32 (whend -> WHEND SEMICOLON .)
    END             reduce using rule 32 (whend -> WHEND SEMICOLON .)
    $end            reduce using rule 32 (whend -> WHEND SEMICOLON .)


state 90

    (30) fend -> FEND SEMICOLON .

    COMMENT         reduce using rule 30 (fend -> FEND SEMICOLON .)
    SET             reduce using rule 30 (fend -> FEND SEMICOLON .)
    ADD             reduce using rule 30 (fend -> FEND SEMICOLON .)
    LESS            reduce using rule 30 (fend -> FEND SEMICOLON .)
    CHANGEDIR       reduce using rule 30 (fend -> FEND SEMICOLON .)
    PLACE           reduce using rule 30 (fend -> FEND SEMICOLON .)
    HIGH            reduce using rule 30 (fend -> FEND SEMICOLON .)
    PUT             reduce using rule 30 (fend -> FEND SEMICOLON .)
    POS             reduce using rule 30 (fend -> FEND SEMICOLON .)
    POSSTART        reduce using rule 30 (fend -> FEND SEMICOLON .)
    CALL            reduce using rule 30 (fend -> FEND SEMICOLON .)
    KEEP            reduce using rule 30 (fend -> FEND SEMICOLON .)
    FOR             reduce using rule 30 (fend -> FEND SEMICOLON .)
    WHEN            reduce using rule 30 (fend -> FEND SEMICOLON .)
    SKIP            reduce using rule 30 (fend -> FEND SEMICOLON .)
    ENDPROC         reduce using rule 30 (fend -> FEND SEMICOLON .)
    WHEND           reduce using rule 30 (fend -> FEND SEMICOLON .)
    FEND            reduce using rule 30 (fend -> FEND SEMICOLON .)
    KEND            reduce using rule 30 (fend -> FEND SEMICOLON .)
    END             reduce using rule 30 (fend -> FEND SEMICOLON .)
    $end            reduce using rule 30 (fend -> FEND SEMICOLON .)


state 91

    (35) kend -> KEND SEMICOLON .

    COMMENT         reduce using rule 35 (kend -> KEND SEMICOLON .)
    SET             reduce using rule 35 (kend -> KEND SEMICOLON .)
    ADD             reduce using rule 35 (kend -> KEND SEMICOLON .)
    LESS            reduce using rule 35 (kend -> KEND SEMICOLON .)
    CHANGEDIR       reduce using rule 35 (kend -> KEND SEMICOLON .)
    PLACE           reduce using rule 35 (kend -> KEND SEMICOLON .)
    HIGH            reduce using rule 35 (kend -> KEND SEMICOLON .)
    PUT             reduce using rule 35 (kend -> KEND SEMICOLON .)
    POS             reduce using rule 35 (kend -> KEND SEMICOLON .)
    POSSTART        reduce using rule 35 (kend -> KEND SEMICOLON .)
    CALL            reduce using rule 35 (kend -> KEND SEMICOLON .)
    KEEP            reduce using rule 35 (kend -> KEND SEMICOLON .)
    FOR             reduce using rule 35 (kend -> KEND SEMICOLON .)
    WHEN            reduce using rule 35 (kend -> KEND SEMICOLON .)
    SKIP            reduce using rule 35 (kend -> KEND SEMICOLON .)
    ENDPROC         reduce using rule 35 (kend -> KEND SEMICOLON .)
    WHEND           reduce using rule 35 (kend -> KEND SEMICOLON .)
    FEND            reduce using rule 35 (kend -> KEND SEMICOLON .)
    KEND            reduce using rule 35 (kend -> KEND SEMICOLON .)
    END             reduce using rule 35 (kend -> KEND SEMICOLON .)
    $end            reduce using rule 35 (kend -> KEND SEMICOLON .)


state 92

    (7) variable1 -> VAR ID ASSIGN NUM . SEMICOLON

    SEMICOLON       shift and go to state 112


state 93

    (1) programa -> variable begin expresiones end procedimientos .

    $end            reduce using rule 1 (programa -> variable begin expresiones end procedimientos .)


state 94

    (51) procedimientos -> procs expresiones .

    END             reduce using rule 51 (procedimientos -> procs expresiones .)
    $end            reduce using rule 51 (procedimientos -> procs expresiones .)


state 95

    (52) procs -> PROC ID .

    COMMENT         reduce using rule 52 (procs -> PROC ID .)
    SET             reduce using rule 52 (procs -> PROC ID .)
    ADD             reduce using rule 52 (procs -> PROC ID .)
    LESS            reduce using rule 52 (procs -> PROC ID .)
    CHANGEDIR       reduce using rule 52 (procs -> PROC ID .)
    PLACE           reduce using rule 52 (procs -> PROC ID .)
    HIGH            reduce using rule 52 (procs -> PROC ID .)
    PUT             reduce using rule 52 (procs -> PROC ID .)
    POS             reduce using rule 52 (procs -> PROC ID .)
    POSSTART        reduce using rule 52 (procs -> PROC ID .)
    CALL            reduce using rule 52 (procs -> PROC ID .)
    KEEP            reduce using rule 52 (procs -> PROC ID .)
    FOR             reduce using rule 52 (procs -> PROC ID .)
    WHEN            reduce using rule 52 (procs -> PROC ID .)
    SKIP            reduce using rule 52 (procs -> PROC ID .)
    ENDPROC         reduce using rule 52 (procs -> PROC ID .)
    WHEND           reduce using rule 52 (procs -> PROC ID .)
    FEND            reduce using rule 52 (procs -> PROC ID .)
    KEND            reduce using rule 52 (procs -> PROC ID .)
    END             reduce using rule 52 (procs -> PROC ID .)
    $end            reduce using rule 52 (procs -> PROC ID .)


state 96

    (36) asignar -> SET ID ASSIGN . NUM SEMICOLON

    NUM             shift and go to state 113


state 97

    (37) actualizar -> ADD SUM ID . SEMICOLON

    SEMICOLON       shift and go to state 114


state 98

    (38) actualizar -> LESS SUM ID . SEMICOLON

    SEMICOLON       shift and go to state 115


state 99

    (39) cambiar_direccion -> CHANGEDIR LPAR LEFT . RPAR SEMICOLON

    RPAR            shift and go to state 116


state 100

    (40) cambiar_direccion -> CHANGEDIR LPAR RIGHT . RPAR SEMICOLON

    RPAR            shift and go to state 117


state 101

    (41) cambiar_direccion -> CHANGEDIR LPAR BACK . RPAR SEMICOLON

    RPAR            shift and go to state 118


state 102

    (42) cambiar_direccion -> CHANGEDIR LPAR SAME . RPAR SEMICOLON

    RPAR            shift and go to state 119


state 103

    (43) colocar -> PLACE BLOCK SEMICOLON .

    COMMENT         reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    SET             reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    ADD             reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    LESS            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    CHANGEDIR       reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    PLACE           reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    HIGH            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    PUT             reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    POS             reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    POSSTART        reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    CALL            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    KEEP            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    FOR             reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    WHEN            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    SKIP            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    ENDPROC         reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    WHEND           reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    FEND            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    KEND            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    END             reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)
    $end            reduce using rule 43 (colocar -> PLACE BLOCK SEMICOLON .)


state 104

    (44) colocar -> PLACE BLOCK NUM . SEMICOLON

    SEMICOLON       shift and go to state 120


state 105

    (45) elevar -> HIGH BLOCK SEMICOLON .

    COMMENT         reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    SET             reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    ADD             reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    LESS            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    CHANGEDIR       reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    PLACE           reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    HIGH            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    PUT             reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    POS             reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    POSSTART        reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    CALL            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    KEEP            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    FOR             reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    WHEN            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    SKIP            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    ENDPROC         reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    WHEND           reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    FEND            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    KEND            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    END             reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)
    $end            reduce using rule 45 (elevar -> HIGH BLOCK SEMICOLON .)


state 106

    (46) elevar -> HIGH BLOCK NUM . SEMICOLON

    SEMICOLON       shift and go to state 121


state 107

    (47) encender -> PUT LIGHT SEMICOLON .

    COMMENT         reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    SET             reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    ADD             reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    LESS            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    CHANGEDIR       reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    PLACE           reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    HIGH            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    PUT             reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    POS             reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    POSSTART        reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    CALL            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    KEEP            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    FOR             reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    WHEN            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    SKIP            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    ENDPROC         reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    WHEND           reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    FEND            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    KEND            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    END             reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)
    $end            reduce using rule 47 (encender -> PUT LIGHT SEMICOLON .)


state 108

    (48) mover -> POS LPAR NUM . COMMA NUM RPAR SEMICOLON

    COMMA           shift and go to state 122


state 109

    (49) pos_inicio -> POSSTART LPAR NUM . COMMA NUM RPAR SEMICOLON

    COMMA           shift and go to state 123


state 110

    (28) c_for -> FOR ID ASSIGN . NUM TIMES

    NUM             shift and go to state 124


state 111

    (31) c_when -> WHEN ID ASSIGN . NUM THEN

    NUM             shift and go to state 125


state 112

    (7) variable1 -> VAR ID ASSIGN NUM SEMICOLON .

    VAR             reduce using rule 7 (variable1 -> VAR ID ASSIGN NUM SEMICOLON .)
    BEGIN           reduce using rule 7 (variable1 -> VAR ID ASSIGN NUM SEMICOLON .)


state 113

    (36) asignar -> SET ID ASSIGN NUM . SEMICOLON

    SEMICOLON       shift and go to state 126


state 114

    (37) actualizar -> ADD SUM ID SEMICOLON .

    COMMENT         reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    SET             reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    ADD             reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    LESS            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    CHANGEDIR       reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    PLACE           reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    HIGH            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    PUT             reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    POS             reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    POSSTART        reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    CALL            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    KEEP            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    FOR             reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    WHEN            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    SKIP            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    ENDPROC         reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    WHEND           reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    FEND            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    KEND            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    END             reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)
    $end            reduce using rule 37 (actualizar -> ADD SUM ID SEMICOLON .)


state 115

    (38) actualizar -> LESS SUM ID SEMICOLON .

    COMMENT         reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    SET             reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    ADD             reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    LESS            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    CHANGEDIR       reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    PLACE           reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    HIGH            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    PUT             reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    POS             reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    POSSTART        reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    CALL            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    KEEP            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    FOR             reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    WHEN            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    SKIP            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    ENDPROC         reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    WHEND           reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    FEND            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    KEND            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    END             reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)
    $end            reduce using rule 38 (actualizar -> LESS SUM ID SEMICOLON .)


state 116

    (39) cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR . SEMICOLON

    SEMICOLON       shift and go to state 127


state 117

    (40) cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR . SEMICOLON

    SEMICOLON       shift and go to state 128


state 118

    (41) cambiar_direccion -> CHANGEDIR LPAR BACK RPAR . SEMICOLON

    SEMICOLON       shift and go to state 129


state 119

    (42) cambiar_direccion -> CHANGEDIR LPAR SAME RPAR . SEMICOLON

    SEMICOLON       shift and go to state 130


state 120

    (44) colocar -> PLACE BLOCK NUM SEMICOLON .

    COMMENT         reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    SET             reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    ADD             reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    LESS            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    CHANGEDIR       reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    PLACE           reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    HIGH            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    PUT             reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    POS             reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    POSSTART        reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    CALL            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    KEEP            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    FOR             reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    WHEN            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    SKIP            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    ENDPROC         reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    WHEND           reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    FEND            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    KEND            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    END             reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)
    $end            reduce using rule 44 (colocar -> PLACE BLOCK NUM SEMICOLON .)


state 121

    (46) elevar -> HIGH BLOCK NUM SEMICOLON .

    COMMENT         reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    SET             reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    ADD             reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    LESS            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    CHANGEDIR       reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    PLACE           reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    HIGH            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    PUT             reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    POS             reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    POSSTART        reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    CALL            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    KEEP            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    FOR             reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    WHEN            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    SKIP            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    ENDPROC         reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    WHEND           reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    FEND            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    KEND            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    END             reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)
    $end            reduce using rule 46 (elevar -> HIGH BLOCK NUM SEMICOLON .)


state 122

    (48) mover -> POS LPAR NUM COMMA . NUM RPAR SEMICOLON

    NUM             shift and go to state 131


state 123

    (49) pos_inicio -> POSSTART LPAR NUM COMMA . NUM RPAR SEMICOLON

    NUM             shift and go to state 132


state 124

    (28) c_for -> FOR ID ASSIGN NUM . TIMES

    TIMES           shift and go to state 133


state 125

    (31) c_when -> WHEN ID ASSIGN NUM . THEN

    THEN            shift and go to state 134


state 126

    (36) asignar -> SET ID ASSIGN NUM SEMICOLON .

    COMMENT         reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    SET             reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    ADD             reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    LESS            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    CHANGEDIR       reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    PLACE           reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    HIGH            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    PUT             reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    POS             reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    POSSTART        reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    CALL            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    KEEP            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    FOR             reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    WHEN            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    SKIP            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    ENDPROC         reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    WHEND           reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    FEND            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    KEND            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    END             reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)
    $end            reduce using rule 36 (asignar -> SET ID ASSIGN NUM SEMICOLON .)


state 127

    (39) cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .

    COMMENT         reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    SET             reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    ADD             reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    LESS            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    PLACE           reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    HIGH            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    PUT             reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    POS             reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    POSSTART        reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    CALL            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    KEEP            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    FOR             reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    WHEN            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    SKIP            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    ENDPROC         reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    WHEND           reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    FEND            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    KEND            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    END             reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)
    $end            reduce using rule 39 (cambiar_direccion -> CHANGEDIR LPAR LEFT RPAR SEMICOLON .)


state 128

    (40) cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .

    COMMENT         reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    SET             reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    ADD             reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    LESS            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    PLACE           reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    HIGH            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    PUT             reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    POS             reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    POSSTART        reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    CALL            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    KEEP            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    FOR             reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    WHEN            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    SKIP            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    ENDPROC         reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    WHEND           reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    FEND            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    KEND            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    END             reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)
    $end            reduce using rule 40 (cambiar_direccion -> CHANGEDIR LPAR RIGHT RPAR SEMICOLON .)


state 129

    (41) cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .

    COMMENT         reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    SET             reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    ADD             reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    LESS            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    PLACE           reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    HIGH            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    PUT             reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    POS             reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    POSSTART        reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    CALL            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    KEEP            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    FOR             reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    WHEN            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    SKIP            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    ENDPROC         reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    WHEND           reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    FEND            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    KEND            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    END             reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)
    $end            reduce using rule 41 (cambiar_direccion -> CHANGEDIR LPAR BACK RPAR SEMICOLON .)


state 130

    (42) cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .

    COMMENT         reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    SET             reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    ADD             reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    LESS            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    PLACE           reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    HIGH            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    PUT             reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    POS             reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    POSSTART        reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    CALL            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    KEEP            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    FOR             reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    WHEN            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    SKIP            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    ENDPROC         reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    WHEND           reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    FEND            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    KEND            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    END             reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)
    $end            reduce using rule 42 (cambiar_direccion -> CHANGEDIR LPAR SAME RPAR SEMICOLON .)


state 131

    (48) mover -> POS LPAR NUM COMMA NUM . RPAR SEMICOLON

    RPAR            shift and go to state 135


state 132

    (49) pos_inicio -> POSSTART LPAR NUM COMMA NUM . RPAR SEMICOLON

    RPAR            shift and go to state 136


state 133

    (28) c_for -> FOR ID ASSIGN NUM TIMES .

    COMMENT         reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    SET             reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    ADD             reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    LESS            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    CHANGEDIR       reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    PLACE           reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    HIGH            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    PUT             reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    POS             reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    POSSTART        reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    CALL            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    KEEP            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    FOR             reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    WHEN            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    SKIP            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    ENDPROC         reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    WHEND           reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    FEND            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    KEND            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    END             reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)
    $end            reduce using rule 28 (c_for -> FOR ID ASSIGN NUM TIMES .)


state 134

    (31) c_when -> WHEN ID ASSIGN NUM THEN .

    COMMENT         reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    SET             reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    ADD             reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    LESS            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    CHANGEDIR       reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    PLACE           reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    HIGH            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    PUT             reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    POS             reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    POSSTART        reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    CALL            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    KEEP            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    FOR             reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    WHEN            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    SKIP            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    ENDPROC         reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    WHEND           reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    FEND            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    KEND            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    END             reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)
    $end            reduce using rule 31 (c_when -> WHEN ID ASSIGN NUM THEN .)


state 135

    (48) mover -> POS LPAR NUM COMMA NUM RPAR . SEMICOLON

    SEMICOLON       shift and go to state 137


state 136

    (49) pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR . SEMICOLON

    SEMICOLON       shift and go to state 138


state 137

    (48) mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .

    COMMENT         reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    SET             reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ADD             reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    LESS            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PLACE           reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    HIGH            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PUT             reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POS             reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POSSTART        reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CALL            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEEP            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FOR             reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEN            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    SKIP            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ENDPROC         reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEND           reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FEND            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEND            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    END             reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)
    $end            reduce using rule 48 (mover -> POS LPAR NUM COMMA NUM RPAR SEMICOLON .)


state 138

    (49) pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .

    COMMENT         reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    SET             reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ADD             reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    LESS            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CHANGEDIR       reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PLACE           reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    HIGH            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    PUT             reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POS             reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    POSSTART        reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    CALL            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEEP            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FOR             reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEN            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    SKIP            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    ENDPROC         reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    WHEND           reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    FEND            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    KEND            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    END             reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)
    $end            reduce using rule 49 (pos_inicio -> POSSTART LPAR NUM COMMA NUM RPAR SEMICOLON .)

